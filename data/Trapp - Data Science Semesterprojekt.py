# -*- coding: utf-8 -*-
"""test2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xNMW8X_xKe736hUqhCNjAeN4tLvCfHnW
"""

import numpy as np
import streamlit as st
import pandas as pd
import json
import plotly.express as px
from matplotlib import pyplot as plt
from pyrolite.plot.templates import TAS, SpinelFeBivariate
from pyrolite.util.plot.axes import share_axes

def main():
    st.title("Plotting")

    # Datei hochladen
    uploaded_file = st.file_uploader("Datei auswählen", type=["csv", "json"])

    if uploaded_file is not None:
        df = load_data(uploaded_file)
        if df is not None:
            if(uploaded_file.type == "text/csv"):
                csv_function(df)
            elif(uploaded_file.type == "application/json"):
                json_function(df)
            else:
                print("Wrong type")

def json_to_dict(file):
    # f = open(file)
    main_dict = json.loads(file)  # dict enthält das Json als Dictionary

    newDict = {}

    for dict in main_dict:
        if "name" in dict:
            name = dict["name"]
            values_dict = {}
            for (a, b) in zip(dict["variables"], dict["values"]):
                if "PPM" in dict["units"]:
                    values_dict[a] = (float(b) / 10000)
                else:
                    values_dict[a] = (float(b))

            newDict[name] = values_dict

    return newDict

def load_data(uploaded_file):
    # Je nach Dateityp unterschiedliche Ladevorgänge
    if uploaded_file.type == "text/csv":
        df = pd.read_csv(uploaded_file, encoding="utf-8")
    elif uploaded_file.type == "application/json":
        my_bytes_value = uploaded_file.read()
        my_json = my_bytes_value.decode('utf8')
        dict = json_to_dict(my_json)
        df = pd.DataFrame.from_dict(dict).T

    else:
        st.error("Ungültiger Dateityp. Bitte wählen Sie eine CSV- oder JSON-Datei aus.")
    return df

def create_ternary_plot(df):
    fig = px.scatter_ternary(df, a=df.columns[0], b=df.columns[1], c=df.columns[2])
    st.plotly_chart(fig)

def create_tas_plot(na2o, k2o, sio2):
    fig, ax = plt.subplots()
    ax = TAS(ax=ax, linewidth=0.5, add_labels=True)
    ax.set_xlabel('SiO2 (wt%)')
    ax.set_ylabel('Na2O + K2O (wt%)')
    for i in range(len(na2o)):
        y_value = na2o[i] + k2o[i]
        ax.plot(sio2[i], y_value, marker='o', color='blue', markersize=1, label='Custom Point')
    # Zeigen Sie das Matplotlib-Bild in Streamlit an
    st.pyplot(fig)

def create_stem_plot(series):
    fig, ax = plt.subplots()
    x = series.index
    y = series.values

    df = pd.DataFrame(np.vstack([x, y]).T, columns=[" ", series.name])

    ax = df.pyroplot.stem(ax=ax, color="k", linestyle="--", linewidth=0.5, figsize=(5, 3))
    st.pyplot(fig)



def csv_function(df):
    # Diagrammtyp auswählen
        chart_type = st.selectbox("Diagramm auswählen", ["Ternäres Diagramm", "TAS Diagramm", "Stem Plot"])

        if chart_type == "Ternäres Diagramm":
            elements = st.multiselect("Elemente auswählen", df.columns)
            if len(elements) == 3:
                create_ternary_plot(df[elements])

        elif chart_type == "TAS Diagramm":
            if "NA2O(WT%)" in df.columns and "K2O(WT%)" in df.columns and "SIO2(WT%)" in df.columns:
                 create_tas_plot(df["NA2O(WT%)"], df["K2O(WT%)"], df["SIO2(WT%)"])
            elif "Na2O" in df.columns and "K2O" in df.columns and "SiO2" in df.columns:
                create_tas_plot(df["Na2O"], df["K2O"], df["SiO2"])
            elif "NA2O" in df.columns and "K2O" in df.columns and "SIO2" in df.columns:
                create_tas_plot(df["NA2O"], df["K2O"], df["SIO2"])
            else:
                st.warning("Die erforderlichen Oxide (Na2O, K2O, SiO2) fehlen in der Datei.")

        elif chart_type == "Stem Plot":
            element = st.selectbox("Element auswählen", df.columns)
            create_stem_plot(df[element])

def json_function(df):
    selected_sample = st.multiselect("Dictionary auswählen", df.index)
    chart_type = st.selectbox("Diagramm auswählen", ["Ternäres Diagramm", "TAS Diagramm"])


    if chart_type == "Ternäres Diagramm":
            elements = st.multiselect("Elemente auswählen", df.columns)
            if len(elements) == 3:
                create_ternary_plot(df.loc[df.index.isin(selected_sample), [*elements]])


    elif chart_type == "TAS Diagramm":

        if "Na" in df.columns and "K" in df.columns and "Si" in df.columns:
            selected_data = df.loc[df.index.isin(selected_sample), ["Na", "K", "Si"]]

            Natriumoxid = [(i * 1.35) for i in selected_data["Na"]]
            Kaliumoxid = [(i * 1.205) for i in selected_data["K"]]
            Siliziumoxid = [(i * 2.139) for i in selected_data["Si"]]

            create_tas_plot(Natriumoxid, Kaliumoxid, Siliziumoxid)

        else:

            st.warning("Die erforderlichen Oxide (Na2O, K2O, SiO2) fehlen in der Datei.")







if __name__ == "__main__":
    main()

